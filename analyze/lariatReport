#!/usr/bin/env lua
-- -*- lua -*-
local cmd = arg[0]

local i,j = cmd:find(".*/")
local cmd_dir = "./"
if (i) then
   cmd_dir = cmd:sub(1,j)
end
package.path = cmd_dir .. "?.lua;" .. package.path
local floor     = math.floor
local lfs       = require("lfs")
local mod       = math.mod
execNameA       = {}

require("strict")
local Dbg          = require("Dbg")
local BeautifulTbl = require("BeautifulTbl")
local Optiks       = require("Optiks")
local Version      = "1.4"
local s_master     = {}
require("serializeTbl")
require("string_split")
require("fileOps")
require("declare")
require("VarDump")
sgeT = false
local Dbg = require("Dbg")

IgnoreLibA = {
   "^liblimic",
   "^libmpi.so",
   "^libmpich.so",
   "^libmpigf.so",
   "^libfmpich.so",
   "^libmpichcxx.so",
   "^libmpichf90.so",
   "^libmpich.so",
   "^libmpl.so",
   "^libopa.so",
}



function processSgeT(sgeT, accT, execT, libT)
   local dbg = Dbg:dbg()
   dbg.start("processSgeT(sgeT, accT, execT, libT)")
   for k, vA in pairs(sgeT) do
      dbg.print("jobID: ",k,"\n")
      for i = 1, #vA do
         local v          = vA[i]
         local execType   = v.execType
         local su         = v.numCores * v.runTime / 3600.0
         local t          = accT[execType] or { num = 0, su = 0, user = {} }
         t.num            = t.num + 1
         t.su             = t.su  + su
         t.user[v.user]   = (t.user[v.user] or 0) + 1
         accT[execType]   = t
         
         local prefix = ""
         if (execType:find("^system:"))then
            accT.system.num = accT.system.num + 1
            accT.system.su  = accT.system.su  + su
            prefix = "(" .. execType:sub(8) ..")"
         end

         if (execType:find("^user:binary"))then
            accT.user.num = accT.user.num + 1
            accT.user.su  = accT.user.su  + su
         end

         if (execType:find("^user:script"))then
            accT.script.num = accT.script.num + 1
            accT.script.su  = accT.script.su  + su
         end
         
         local exec      = prefix .. barefilename(v.exec)

         local t         = execT[exec] or { num=0, su = 0, job={id="", su = 0},userT={}}
         t.su            = t.su  + su
         t.num           = t.num + 1
         t.userT[v.user] = (t.userT[v.user] or 0) + su
         if (su > t.job.su) then
            t.job.su   = su
            t.job.id   = v.jobID
            t.job.user = v.user
         end
         execT[exec]     = t
         
         if (next(v.pkgT) ~= nil) then
            recordLibT(su, v.pkgT, libT)
         end
      end
   end
   dbg.fini()
end


function keepLib(libA)

   for i = 1,#libA do
      local lib = libA[i]
      for k = 1, #IgnoreLibA do
         local v = IgnoreLibA[k]
         if (lib:find(v)) then
            return false
         end
      end
   end
   return true
end

function recordLibT(su, pkgT, libT)
   for k, v in pairs(pkgT) do
      if (keepLib(v.libA)) then
         local t            = libT[k] or { su = 0.0, flavor = {}, num = 0}
         t.su               = t.su  + su
         t.num              = t.num + 1
         t.flavor[v.flavor] = (t.flavor[v.flavor] or 0 ) + su
         libT[k]            = t
      end
   end
end


function reportLibT(libT)
   local a = {}
   for k,v in pairs(libT) do
      a[#a+1] = {name=k, su=v.su, num=v.num}
   end
   if (#a > 0) then
      print("\nFound ",#a," shared libraries:")
   else
      print("\nFound no shared libraries\n")
      return
   end

   table.sort(a,function(x,y) return x.su > y.su end)
   local fmt = "%7.2f"
   local b   = {}

   b[#b+1] = { "Shared Library Module","Total SU ", "#Jobs" }
   b[#b+1] = { "---------------------","-------- ", "-----" }
   for i = 1, #a do
      local su = fmt:format(a[i].su)
      b[#b+1]  = {a[i].name, su, tostring(a[i].num)}
   end

   local bt = BeautifulTbl:new{tbl=b, justifyT = {"Left", "Right", "Right"}}
   io.stdout:write(bt:build_tbl(),"\n");
end


function displayExecT(a, msg)
   local masterTbl = masterTbl()
   local b         = {}
   local fmt       = "%7.2f"
   local dplyMU   = masterTbl.maxUser

   print ("\n",msg,":\n")

   b[1] = {"Exec Name", "Total SU", "#Jobs", "Job ID", "#Users" }
   b[2] = {"---------", "--------", "-----", "------", "------" }
   local justifyA = {"Left", "Right", "Right", "Right","Right"}
   if (dplyMU) then
      b[1][#b[1]+1] = "maxUser" 
      b[2][#b[2]+1] = "-------" 
      justifyA[#justifyA + 1] = "Left"
   end

   for i = 1,#a do
      local su = fmt:format(a[i].su)
      b[#b+1] = {a[i].name, su, tostring(a[i].num),a[i].id,tostring(a[i].numUsers)}
      if (dplyMU) then
         b[#b][#b[#b]+1] = a[i].maxUser
      end
   end

   local bt = BeautifulTbl:new{tbl=b, justifyT=justifyA}
   io.stdout:write(bt:build_tbl(),"\n");
end

function reportTop(execT, execFile)
   local a = {}
   for k,v in pairs(execT) do
      local t = v.userT
      local icount  = 0
      local maxSU   = 0
      local maxUser = ""
      for k,v in pairs(t) do
         icount = icount + 1
         if (v > maxSU) then
            maxSU = v
            maxUser = k
         end
      end

      a[#a+1] = {name=k, su=v.su, num=v.num, id=v.job.id, numUsers=icount, maxUser=maxUser}
   end

   -- Report Top SU jobs

   local masterTbl = masterTbl()
   local count     = tonumber(masterTbl.count)

   table.sort(a,function(x,y) return x.su > y.su end)

   local n = math.min(count,#a)
   
   --for i = 1, #a do
   --   print(i,",",a[i].su)
   --end
      

   local aa = {}
   local msg = "Top "..tostring(n).." SU jobs"
   for i = 1,n do
      aa[i] = a[i]
   end

   displayExecT(aa,msg)

   -- Report Top NUM jobs

   table.sort(a,function(x,y) return x.num > y.num end)

   local n = math.min(count,#a)
   
   --for i = 1, #a do
   --   print(i,",",a[i].su)
   --end
      

   local aa = {}
   local msg = "Top "..tostring(n).." NUM jobs"
   for i = 1,n do
      aa[i] = a[i]
   end

   displayExecT(aa,msg)

   if (execFile and isFile(execFile) ) then
      assert(loadfile(execFile))()

      aa = {}
      for i = 1, #a do
         for j = 1, #execNameA do
            if ( a[i].name:find(execNameA[j]) )then
               aa[#aa+1] = a[i]
            end
         end
      end

      msg = "Report of jobs from execfile"
      displayExecT(aa,msg)
   end


end
function masterTbl()
   return s_master
end

function main()
   local dbg   = Dbg:dbg()
   local execT = {}
   local libT  = {}
   local accT  = { 
      system  = {num = 0, su    =  0 },
      user    = {num = 0, su    =  0 },
      script  = {num = 0, su    =  0 },
   }

   options()

   local masterTbl = masterTbl()
   local pargs     = masterTbl.pargs
   if (masterTbl.debug) then
      dbg:activateDebug(1)
   end

   dbg.start("LariatReport()")

   --declare("sgeT",{})

   for i = 1,#pargs do
      assert(loadfile(pargs[i]))()
      processSgeT(sgeT, accT, execT, libT)
   end

   local totalNum = accT.system.num + accT.user.num + accT.script.num
   local totalSU  = accT.system.su  + accT.user.su  + accT.script.su

   local b = {}
   b[#b+1] = { "Kind"," #Jobs", "% Jobs", " #SU", "% SU" }
   b[#b+1] = { "----","------", "------", "----", "----" }
   
   local kindA = {"system", "user", "script"}

   for i = 1,#kindA do
      local a    = {}
      local kind = kindA[i]
      a[#a+1]    = kind
      a[#a+1]    = tostring(accT[kind].num)
      a[#a+1]    = string.format("%6.2f",accT[kind].num/totalNum*100.0)
      a[#a+1]    = string.format("%11.2f",accT[kind].su)
      a[#a+1]    = string.format("%6.2f",accT[kind].su/totalSU*100.0)
      b[#b+1]    = a
   end
   local bt = BeautifulTbl:new{tbl=b, justifyT={"L","R","R","R","R"}}
   io.stdout:write(bt:build_tbl(),'\n')
   
   reportLibT(libT)   

   reportTop(execT, masterTbl.execFile)
   dbg.fini()

end
function options()
   local masterTbl = masterTbl()
   local usage         = "Usage: processLDDjob [options]"
   local cmdlineParser = Optiks:new{usage=usage, version=Version}

   cmdlineParser:add_option{ 
      name    = {'-f','--execFile'},
      dest    = 'execFile',
      action  = 'store',
      default = nil,
      help    = "File containing a list of executables in a lua Table execNameA={}",
   }

   cmdlineParser:add_option{ 
      name    = {'-n','--top'},
      dest    = 'count',
      action  = 'store',
      default = "20",
      help    = "The number of executables to report",
   }

   cmdlineParser:add_option{ 
      name    = {'--maxUser'},
      dest    = 'maxUser',
      action  = 'store_true',
      help    = "report the max user",
   }
   cmdlineParser:add_option{ 
      name    = {'-d','--debug'},
      dest    = 'debug',
      action  = 'store_true',
      help    = "debug flag",
   }


   local optionTbl, pargs = cmdlineParser:parse(arg)

   for v in pairs(optionTbl) do
      masterTbl[v] = optionTbl[v]
   end
   masterTbl.pargs = pargs

end

main()
