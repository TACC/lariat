#!@path_to_lua@/lua
-- -*- lua -*-
local cmd = arg[0]

local i,j = cmd:find(".*/")
local cmd_dir = "./"
if (i) then
   cmd_dir = cmd:sub(1,j)
end
package.path = cmd_dir .. "?.lua;" .. package.path


require("strict")
require("string_split")
require("fileOps")
require("capture")
require("readRMap")
local Dbg       = require("Dbg")
local Optiks    = require("Optiks")
local getenv    = os.getenv
local concatTbl = table.concat
s_master        = {}
ignoreT = {
   tacc_affinity     = 1,
   getmode_affinity  = 1,
   env               = 1,
}

mpiT = {
   mvapich  = 1,
   mvapich2 = 1,
   openmpi  = 1,
   impi     = 1,
}

activeList = {}

function masterTbl()
   return s_master
end

function regularize(value)
   value = value:gsub("//+","/")
   value = value:gsub("/%./","/")
   value = value:gsub("/$","")
   value = abspath(value)
   return value
end

function findEnvVersions(mpiStack, compiler)
   local dbg   = Dbg:dbg()
   dbg.start("findEnvVersions(",mpiStack,",", compiler,")")
   local sysT  = {mpi="unknown",comp="unknown"}
   local lmodA = {
      getenv("LMOD_CMD"),
      "/opt/apps/lmod/lmod/libexec/lmod",
   }

   local lmod_cmd = nil

   for i = 1, #lmodA do
      if (lmodA[i] and isFile(lmodA[i])) then
         lmod_cmd = lmodA[i]
         break
      end
   end
   

   if (lmod_cmd == nil) then return sysT end
   local s        = capture("(" .. lmod_cmd .. " bash tablelist > /dev/null ) 2>&1 ")

   assert(loadstring(s))()
   sysT.mpi  = mpiStack .."/"..tostring(activeList[mpiStack])
   sysT.comp = compiler .."/"..tostring(activeList[compiler])

   dbg.fini()
   return sysT
end

function checkForMissingLibraries(ldd)
   local missing = false
   for l in ldd:split("\n") do
      if (l:find("=>  *not found")) then
         missing = true
         break
      end
   end

   return missing

end

function matchExecWmodules(reverseMapT, ldd)

   local execT = {}

   local dbg = Dbg:dbg()
   dbg.start("matchExecWmodules(reverseMapT, ldd)")
   
   local libPathA = {}
   for lib in ldd:split("\n") do
      lib = lib:gsub(".*=> *","")
      lib = lib:gsub("%(0x.*$","")
      lib = regularize(lib)
      libPathA[#libPathA+1] = lib
   end

   
   local pkgT = {}

   for i = 1, #libPathA do
      local dir, lib = splitFileName(libPathA[i])
      local pkgInfo = reverseMapT[regularize(dir)]
      if (pkgInfo) then
         local t            = pkgT[pkgInfo.pkg] or {}
         local libA         = t.libA or {}
         t.flavor           = pkgInfo.flavor
         libA[#libA+1]      = lib:trim()
         t.libA             = libA
         pkgT[pkgInfo.pkg] = t
      end
   end
   
   
   for k, v in pairs(pkgT) do
      local mname, mversion = splitFileName(k)
      mname = mname:gsub("/$","")
      if (mpiT[mname]) then
         execT.mpi   = pathJoin(mname, mversion)
         dbg.print("execT.mpi: ", execT.mpi,"\n")
         local a     = {}
         for i = 1, #v.flavor do
            a[#a + 1] = v.flavor[i]:gsub("default:","")
            dbg.print("comp: ", a[#a],"\n")
         end
         execT.compA = a
      end
   end
   dbg.fini()
   return execT
end

function main()

   options()
   local cmd       = "unknown"
   local masterTbl = masterTbl()
   local pargs     = masterTbl.pargs
   local dbg       = Dbg:dbg()
   if (masterTbl.debug or getenv("TACC_IBWRAPPER_DEBUG")) then
      dbg:activateDebug(1)
   end
   
   dbg.start("checkExec(\""..concatTbl(pargs,"\", \"").."\")")


   for i = 1, #pargs do
      local arg = pargs[i]
      if (not (ignoreT[arg] or arg:find("=") or arg:sub(1,1) == "-")) then
         cmd = arg
         break;
      end
   end
   local path=getenv("PATH") or ""

   local execPath = findInPath(cmd,path)

   if (execPath == "") then
      dbg.fini()
      return 1
   end


   local reverseMapT = readRMap(masterTbl.reverseMapD)

   local ldd = capture("ldd "..execPath)

   if (checkForMissingLibraries(ldd)) then
      io.stdout:write("******************************************************\n",
                      " There are missing shared libraries \n",
                      "******************************************************\n")
      dbg.fini()
      return 1
   end
      


   local mpiStack = getenv("TACC_FAMILY_MPI")      or "unknown"
   local compiler = getenv("TACC_FAMILY_COMPILER") or "unknown"
   dbg.print("mpiStack: ",mpiStack," compiler: ",compiler,"\n")
   local sysT     = findEnvVersions(mpiStack, compiler)
   local status = 0
   if (sysT.mpi == "unknown") then
      dbg.fini()
      return status
   end


   

   dbg.print("sysT.mpi: ",tostring(sysT.mpi), ", sysT.comp: ",tostring(sysT.comp),"\n")

   local execT = matchExecWmodules(reverseMapT,ldd)
   
   dbg.print("execT.mpi: ",tostring(execT.mpi),"\n")

   if (execT == nil or execT.mpi == nil) then
      dbg.fini()
      return status
   end
   
   if (sysT.mpi ~= execT.mpi and sysT.mpi and execT.mpi) then
      io.stdout:write("******************************************************\n",
                      " WARNING: Your MPI Environment is :       ",sysT.mpi,"\n",
                      "          Your executable was built with: ",execT.mpi,"\n",
                      "******************************************************\n")
      status = 1
   end      
                      
   
   local found = false
   for i = 1, #execT.compA do
      if (sysT.comp == execT.compA[i] ) then
         found = true
         break
      end
   end
   

   
   if (not found ) then
      local compStr = concatTbl(execT.compA, " or ")
      if (sysT.comp and compStr) then
         io.stdout:write("******************************************************\n",
                         " WARNING: Your Compiler Environment is :  ",sysT.comp,"\n",
                         "          Your executable was built with: ",compStr,"\n",
                         "******************************************************\n")
      end
      status = 1
   end
   dbg.fini()
   return status
end

function options()
   local masterTbl     = masterTbl()
   local Version       = "1.6.2"
   local usage         = "Usage: checkExec [options] exec"
   local cmdlineParser = Optiks:new{usage=usage, version=Version}

   cmdlineParser:add_option{ 
      name   = {'-v','--verbose'},
      dest   = 'verbosityLevel',
      action = 'count',
   }

   cmdlineParser:add_option{ 
      name   = {'-d','--debug'},
      dest   = 'debug',
      action = 'store_true',
   }


   cmdlineParser:add_option{ 
      name   = {'-m','--reverseMap', '--map'},
      dest   = 'reverseMapD',
      action = 'store',
      help   = "reverseMap directory",
   }


   local optionTbl, pargs = cmdlineParser:parse(arg)

   for v in pairs(optionTbl) do
      masterTbl[v] = optionTbl[v]
   end
   masterTbl.pargs = pargs

end

local status = main()
if (status ~=0) then
   os.exit(status)
end
