#!@path_to_lua@/lua
-- -*- lua -*-
require("strict")
require("string_split")
require("VarDump")
require("Dbg")
require("fileOps")
require("capture")
local getenv = os.getenv
local concatTbl = table.concat
ignoreT = {
   tacc_affinity     = 1,
   getmode_affinity  = 1,
}

lib2mpiT =
   {
   ["libmpich%."] = { "/mvapich2/", "/mvapich/",},
   ["libmpi%."]   = {"openmpi"},
}

ignoreLines = {
   "^LMOD",
   "^export",
   "^MODULEPATH",
}
   


activeList = {}

function findEnvVersions(mpiStack, compiler)
   local lmod_cmd = getenv("LMOD_CMD")
   local s        = capture(lmod_cmd .. " bash tablelist 2>&1 ")

   local a = {}
   for l in s:split("\n") do
      local keep = true
      for i = 1,#ignoreLines do
         if (l:find(ignoreLines[i])) then
            keep = false
            break
         end
      end
      if (keep) then
         a[#a+1] = l
      end
   end

   s = concatTbl(a,"\n")
   assert(loadstring(s))()

   local sysT = {mpi="unknown",comp="unknown"}
   local scv  = (activeList[compiler] or ""):gsub("-[0-9]*","")
   sysT.mpi  = mpiStack .."-"..tostring(activeList[mpiStack])
   sysT.comp = compiler .."-"..scv

   return sysT
end

function checkForMissingLibraries(ldd)
   local missing = false
   for l in ldd:split("\n") do
      if (l:find("=>  *not found")) then
         missing = true
         break
      end
   end

   return missing

end



function matchExecWmodules(ldd)

   local execT

   local dbg = tonumber(getenv("RTM_IBRUN_DEBUG") or 0)

   local mpiN, libName, lib
   for l in ldd:split("\n") do
      for k,v in pairs(lib2mpiT) do
         if (l:find(k)) then
            lib = l
            libName = k
            if (dbg > 0) then
               print ("lib:     ", lib)
               print ("libName: ", libName)
            end
            for i = 1,#v do
               local lib = v[i]
               if (l:find(lib)) then
                  mpiN = lib
                  break
               end
            end
            break
         end
      end
      if (mpiN) then break end
   end

   if (not mpiN) then
      return execT
   end


   lib = lib:gsub("/lib/" .. libName .. ".*","")
   lib = lib:gsub("/lib/shared/" .. libName .. ".*","")

   if (dbg > 0) then
      print ("lib:",lib)
   end

   local pathA = {}

   for p in lib:split("/") do
      pathA[#pathA+1] = p
   end

   local execT = {}
   execT.mpi  = pathA[#pathA-1] .."-".. pathA[#pathA]

   local _,_,c,v = pathA[#pathA-2]:find("([a-zA-Z]*)-?(.*)")
   v = v:gsub("-[0-9]*","")
   v = v:gsub("_",".")

   execT.comp = tostring(c).."-"..tostring(v)
   
   return execT
end

function main()

   local dbg = tonumber(getenv("RTM_IBRUN_DEBUG") or 0)

   local cmd="unknown"

   for i = 1, #arg do
      if (not ignoreT[arg[i]]) then
         cmd = arg[i]
         break;
      end
   end
   local path=getenv("PATH") or ""

   local execPath = findInPath(cmd,path)

   local ldd = capture("ldd "..execPath)

   if (checkForMissingLibraries(ldd)) then
      io.stdout:write("******************************************************\n",
                      " There are missing shared libraries \n",
                      "******************************************************\n")
      return 1
   end
      


   local mpiStack = getenv("TACC_FAMILY_MPI")      or "unknown"
   local compiler = getenv("TACC_FAMILY_COMPILER") or "unknown"
   local sysT     = findEnvVersions(mpiStack, compiler)


   if (dbg > 0) then
      print("sysT:    ",sysT.mpi, sysT.comp)
   end

   local execT = matchExecWmodules(ldd)
   local status = 0

   if (execT == nil) then
      if (dbg > 0) then
         print ("no execT found")
      end
      return status
   end

   if (dbg > 0) then
      print("execT:    ",execT.mpi, execT.comp)
   end

   if (sysT.mpi ~= execT.mpi) then
      io.stdout:write("******************************************************\n",
                      " WARNING: Your MPI Environment is :       ",sysT.mpi,"\n",
                      "          Your executable was built with: ",execT.mpi,"\n",
                      "******************************************************\n")
      status = 1
   end      
                      


   if (sysT.comp ~= execT.comp) then
      io.stdout:write("******************************************************\n",
                      " WARNING: Your Compiler Environment is :  ",sysT.comp,"\n",
                      "          Your executable was built with: ",execT.comp,"\n",
                      "******************************************************\n")
      status = 1
   end
   return status
end

local status = main()
if (status ~=0) then
   os.exit(status)
end
