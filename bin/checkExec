#!/usr/bin/env lua
-- -*- lua -*-
require("strict")
require("string_split")
require("VarDump")
require("Dbg")
require("fileOps")
require("capture")
local getenv = os.getenv
local concatTbl = table.concat
ignoreT = {
   tacc_affinity     = 1,
   getmode_affinity  = 1,
}

mpi2libT = {
   hecura   = "libmpich%.",
   mvapich2 = "libmpich%.",
   mvapich  = "libmpich%.",
   openmpi  = "libmpi%."
}
ignoreLines = {
   "^LMOD",
   "^export",
   "^MODULEPATH",
}
   


activeList = {}

function matchExecWmodules(l, mpiStack, compiler, libName)

   local lmod_cmd = getenv("LMOD_CMD")
   local s        = capture(lmod_cmd .. " bash tablelist 2>&1 ")

   local a = {}
   for l in s:split("\n") do
      local keep = true
      for i = 1,#ignoreLines do
         if (l:find(ignoreLines[i])) then
            keep = false
            break
         end
      end
      if (keep) then
         a[#a+1] = l
      end
   end

   s = concatTbl(a,"\n")
   assert(loadstring(s))()

   print ("compiler: ", compiler, " version " , activeList[compiler])
   print ("mpi: ", mpiStack, " version " , activeList[mpiStack])

   l = l:gsub("lib/" .. libName .. ".*","")
   print (l)

end

function main()

   local cmd="unknown"

   for i = 1, #arg do
      if (not ignoreT[arg[i]]) then
         cmd = arg[i]
         break;
      end
   end
   local path=getenv("PATH") or ""

   local execPath = findInPath(cmd,path)

   local ldd = capture("ldd "..execPath)

   local mpiStack = getenv("TACC_FAMILY_MPI")      or "unknown"
   local compiler = getenv("TACC_FAMILY_COMPILER") or "unknown"
   local libName  = mpi2libT[mpiStack]

   if (libName == nil) then
      return 0
   end

   for l in ldd:split("\n") do
      if (l:find(libName)) then
         print (l)
         matchExecWmodules(l, mpiStack, compiler, libName)
      end
   end

end

main()
